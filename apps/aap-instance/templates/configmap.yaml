apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.aap.name }}-access-info-generator
  namespace: {{ .Values.aap.namespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.aap.name }}
    app.kubernetes.io/part-of: ansible-automation-platform
    app.kubernetes.io/managed-by: gitops
    component: access-info
  annotations:
    argocd.argoproj.io/sync-wave: "20"
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  ttlSecondsAfterFinished: 86400  # 24 hours
  template:
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ .Values.automation.serviceAccount }}
      containers:
      - name: access-info-generator
        image: {{ .Values.automation.image }}
        imagePullPolicy: {{ .Values.automation.pullPolicy }}
        command: ["bash", "-c"]
        args:
        - |
          # Wait for AAP controller to be ready
          echo "Waiting for AAP Controller to be ready..."
          oc wait --for=condition=Running automationcontroller/{{ .Values.aap.name }} \
            -n {{ .Values.aap.namespace }} --timeout=1800s || true
          
          # Get the AAP Controller URL
          CONTROLLER_URL=""
          if oc get route -n {{ .Values.aap.namespace }} -l app.kubernetes.io/name={{ .Values.aap.name }} -o name | head -1; then
            CONTROLLER_URL="https://$(oc get route -n {{ .Values.aap.namespace }} -l app.kubernetes.io/name={{ .Values.aap.name }} -o jsonpath='{.items[0].spec.host}' 2>/dev/null || echo 'Route not found')"
          fi
          
          # Create access info ConfigMap
          cat <<EOF | oc apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: {{ .Values.aap.name }}-access-info
            namespace: {{ .Values.aap.namespace }}
            labels:
              app.kubernetes.io/name: {{ .Values.aap.name }}
              app.kubernetes.io/part-of: ansible-automation-platform
              app.kubernetes.io/managed-by: gitops
          data:
            url: "${CONTROLLER_URL}"
            username: "{{ .Values.aap.admin.username }}"
            email: "{{ .Values.aap.admin.email }}"
            setup-complete: "true"
            external-postgres: "{{ .Values.aap.database.external.enabled }}"
            instructions: |
              Ansible Automation Platform Access Information
              ==========================================
              
              URL: ${CONTROLLER_URL}
              Username: {{ .Values.aap.admin.username }}
              Password: oc get secret {{ .Values.aap.name }}-admin-password -n {{ .Values.aap.namespace }} -o jsonpath='{.data.password}' | base64 -d
              
              Status Check:
              oc get automationcontroller {{ .Values.aap.name }} -n {{ .Values.aap.namespace }}
              
              Quick Access Command:
              oc get configmap {{ .Values.aap.name }}-access-info -n {{ .Values.aap.namespace }} -o jsonpath='{.data.instructions}'
          EOF
          
          echo "Access info ConfigMap created successfully"
